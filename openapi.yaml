openapi: 3.0.3
info:
  title: RTV USA AGD API
  version: '1.0'
  description: Sklep ze sprzętem RTV i AGD
servers:
  - url: http://localhost:3000/
tags:
  - name: products
    description: Product list and individual products
  - name: users
    description: User authentication and information
  - name: orders
    description: List and create orders
paths:
  /products:
    get:
      tags:
        - products
      summary: Get all products
      description: Get all products as an array
      operationId: getProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductArr'
  /products/{productId}:
    get:
      tags:
        - products
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of the product to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - Product not found
  /users/sign_up:
    post:
      tags:
        - users
      summary: Create a new account
      description: Creates a new account and returns user information
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        200:
          description: Successfully created a new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserInfo'
        422:
          description: Something was wrong in the submitted data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - Password confirmation doesn't match Password
                  - Email has already been taken
  /users/login:
    post:
      tags:
        - users
      summary: Log into an account
      description: Logs the user in and returns user information
      operationId: logIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserInfo'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - Invalid email or password
  /users/logout:
    delete:
      tags:
        - users
      summary: Log out of an account
      description: Logs out the user
      operationId: LogOut
      responses:
        200:
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotLoggedIn'
  /users/is_logged_in:
    get:
      tags:
        - users
      summary: Check if the user is logged in
      description: Returns the login status and current user information if the user is logged in
      operationId: IsLoggedIn
      responses:
        200:
          description: Returns the login status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserInfo'
              examples:
                Logged In:
                  value:
                    logged_in: true
                    user:
                      id: 4
                      name: Kamil Mickiewicz
                      email: kombinator7@example.com
                Logged Out:
                  value:
                    logged_in: false
  /orders:
    get:
      tags:
        - orders
      summary: List all orders for a currently logged in user
      description: Returns a list of all orders made by the currently logged in user
      operationId: getOrders
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        401:
          description: Client not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - You are not authorised to perform this action
    post:
      tags:
        - orders
      summary: Create a new order
      description: Creates a new order and return it on success
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        200:
          description: The newly created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Client not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - You are not authorised to perform this action
        422:
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - Product not found
  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of the order to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - Order not found
        401:
          description: Client not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              example:
                errors:
                  - You are not authorised to perform this action

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 10
        name:
          type: string
          example: Żelazko
        price:
          type: number
          example: 420.69
        description:
          type: string
          example: Super hiper żelazko zdolne do wyprasowania nawet najbardziej wymagających ubrań
        created_at:
          type: string
          example: 2023-03-31T09:14:00.180Z
        updated_at:
          type: string
          example: 2023-03-31T09:32:31.734Z
    ProductArr:
      type: array
      items:
        $ref: '#/components/schemas/Product'
      example:
        - id: 1
          name: Żelazko
          price: 420.69
          created_at: 2023-03-31T09:14:00.180Z
          updated_at: 2023-03-31T09:14:00.180Z
        - id: 2
          name: Szybki dysk SSD
          price: 69.99
          created_at: 2023-03-31T09:32:31.734Z
          updated_at: 2023-03-31T09:32:31.734Z
    SignUpRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            name:
              type: string
              example: Kamil Mickiewicz
            email:
              type: string
              example: kombinator7@example.com
            password:
              type: string
              example: P5&e,c*/KMQ>
            password_confirmation:
              type: string
              example: P5&e,c*/KMQ>
    LoginRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              example: kombinator7@example.com
            password:
              type: string
              example: P5&e,c*/KMQ>
    ErrorList:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
            example:
              - Invalid email or password
    UserNotLoggedIn:
      type: object
      properties:
        logged_in:
          type: boolean
          example: false
    CurrentUserInfo:
      type: object
      properties:
        logged_in:
          type: boolean
          example: true
        user:
          type: object
          properties:
            id:
              type: number
              example: 4
            name:
              type: string
              example: Kamil Mickiewicz
            email:
              type: string
              example: kombinator7@example.com
    Order:
      type: object
      properties:
        id:
          type: number
          example: 3
        price:
          type: number
          example: 99.99
        quantity:
          type: number
          example: 2
        status:
          type: string
          example: Pending
        created_at:
          type: string
          example: 2023-03-31T09:14:00.180Z
        updated_at:
          type: string
          example: 2023-03-31T09:32:31.734Z
        product:
          type: object
          properties:
            id:
              type: number
              example: 4
            name:
              type: string
              example: "Żelazko"
    OrderList:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    CreateOrderRequest:
      type: object
      properties:
        order:
          type: object
          properties:
            product:
              type: number
              example: 4
            quantity:
              type: number
              example: 2
